package com.goodrequest.hiring.ui

import android.os.Bundle
import android.view.View.GONE
import android.view.View.VISIBLE
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.core.view.size
import androidx.lifecycle.*
import androidx.recyclerview.widget.RecyclerView
import com.goodrequest.hiring.PokemonApi
import com.goodrequest.hiring.databinding.ActivityBinding

class PokemonActivity: ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val vm by viewModel { PokemonViewModel(it, PokemonApi) }
        val adapter = PokemonAdapter()
        var page = 1
        vm.pokemons.value ?: vm.load(page)

        ActivityBinding.inflate(layoutInflater).run {
            setContentView(root)
            refresh.setOnRefreshListener {
                page = 1
                vm.load(page)
            }
            retry.setOnClickListener {
                page = 1
                vm.load(page)
                loading.visibility = VISIBLE
            }

            vm.pokemons.observe(this@PokemonActivity) { result: Result<List<Pokemon>>? ->
                result?.fold(
                    onSuccess = { pokemons ->
                        loading.visibility = GONE
                        refresh.isRefreshing = false
                        failure.visibility = GONE
                        items.adapter = adapter
                        Toast.makeText(
                            baseContext,
                            "List sized: ${items.size}, page: ${page}",
                            Toast.LENGTH_LONG).show()

                        val combinedPokemons: List<Any> = (adapter.getItems()
                                + pokemons
                                + List(1) {""}
                                )


                        adapter.show(combinedPokemons)

                    },
                    onFailure = {
                        refresh.isRefreshing = false
                        loading.visibility = GONE
                        adapter.takeIf { it.itemCount == 0 }?.let {
                            failure.visibility = VISIBLE
                        }

                        Toast.makeText(
                            baseContext,
                            "Failed to load pokemon data",
                            Toast.LENGTH_LONG).show()
                    }
                )
            }

            items.addOnScrollListener(object: RecyclerView.OnScrollListener() {
                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                    super.onScrolled(recyclerView, dx, dy)
                    if (!items.canScrollVertically(1)) {
//                        adapter.show(adapter.getItems() + List(1) {""})
                        vm.load(page++)
                    }
                }
            })

        }

    }
}

/**
 * Helper function that enables us to directly call constructor of our ViewModel but also
 * provides access to SavedStateHandle.
 * Shit like this is usually generated by Hilt :D
 */
inline fun <reified VM: ViewModel> ComponentActivity.viewModel(crossinline create: (SavedStateHandle) -> VM) =
    ViewModelLazy(
        viewModelClass = VM::class,
        storeProducer = { viewModelStore },
        factoryProducer = {
            object: AbstractSavedStateViewModelFactory(this@viewModel, null) {
                override fun <T : ViewModel> create(key: String, type: Class<T>, handle: SavedStateHandle): T =
                    create(handle) as T
            }
    })